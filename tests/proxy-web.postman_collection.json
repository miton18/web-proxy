{
	"variables": [],
	"info": {
		"name": "proxy-web",
		"_postman_id": "0d15cc0a-3c3a-68fd-c4f2-fcfb2f7efecb",
		"description": "",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json"
	},
	"item": [
		{
			"name": "1 Token create",
			"description": "",
			"item": [
				{
					"name": "Get new Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"No errors\"]          = data.err === undefined;",
									"tests[\"Contain a token\"]    = data.token !== null;",
									"",
									"tests[\"Response time is less than 200ms\"] = responseTime < 500; // pas cool",
									"",
									"",
									"postman.setEnvironmentVariable('token', data.token);",
									""
								]
							}
						}
					],
					"request": {
						"url": "{{host}}/api/token",
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"4dm1n\",\n\t\"password\": \"pr0xy-p455w0rd\"\n}"
						},
						"description": ""
					},
					"response": []
				}
			]
		},
		{
			"name": "2 Domains",
			"description": "",
			"item": [
				{
					"name": "Create a domain",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var data = JSON.parse(responseBody);",
									"var schemaRoute = {",
									" \"_id\": {",
									"    \"type\": \"string\"",
									" },",
									" \"domain\": {",
									"    \"type\": \"string\" ",
									" }};",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"No errors\"]          = data.error === undefined;",
									"",
									"tests[\"Response time is less than 200ms\"] = responseTime < 200;",
									"",
									"tests[\"Check route properties type\"] = tv4.validate(data, schemaRoute);",
									"console.log(\"Validation failed: \", tv4.error);",
									"",
									"if (data._id) postman.setEnvironmentVariable('domainID', data._id);",
									""
								]
							}
						}
					],
					"request": {
						"url": "{{host}}/api/domain",
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							},
							{
								"key": "authorization",
								"value": "JWT {{token}}",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"localA.dev\"\n}"
						},
						"description": "Create a new domain in proxy"
					},
					"response": []
				},
				{
					"name": "Get all domains",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"No errors\"]          = data.error === undefined;",
									"tests[\"Return an array\"]    = Array.isArray(data);",
									"tests[\"At least one route\"] = data.length > 0;",
									"",
									"tests[\"Response time is less than 200ms\"] = responseTime < 400;",
									""
								]
							}
						}
					],
					"request": {
						"url": "{{host}}/api/domain",
						"method": "GET",
						"header": [
							{
								"key": "authorization",
								"value": "JWT {{token}}",
								"description": ""
							}
						],
						"body": {},
						"description": "List all domains of the proxy"
					},
					"response": []
				},
				{
					"name": "Get one domain",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var data = JSON.parse(responseBody);",
									"var schemaRoute = {",
									" \"_id\": {",
									"    \"type\": \"string\"",
									" },",
									" \"domain\": {",
									"    \"type\": \"string\" ",
									" }};",
									"",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"No errors\"]          = data.error === undefined;",
									"tests[\"Contain a route\"]    = typeof data === 'object';",
									"",
									"tests[\"Check route properties type\"] = tv4.validate(data, schemaRoute);",
									"console.log(\"Validation failed: \", tv4.error);",
									"",
									"tests[\"Response time is less than 200ms\"] = responseTime < 400;",
									""
								]
							}
						}
					],
					"request": {
						"url": "{{host}}/api/domain/{{domainID}}",
						"method": "GET",
						"header": [
							{
								"key": "authorization",
								"value": "JWT {{token}}",
								"description": ""
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "_id",
									"value": "575c96e27512737c104d3458",
									"type": "text",
									"enabled": false
								}
							]
						},
						"description": "Get just one route of proxy with a specified ID"
					},
					"response": []
				},
				{
					"name": "Edit domain",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var data = JSON.parse(responseBody);",
									"var schemaRoute = {",
									" \"_id\": {",
									"    \"type\": \"string\"",
									" },",
									" \"domain\": {",
									"    \"type\": \"string\" ",
									" }};",
									"",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"No errors\"]          = data.err === undefined;",
									"tests[\"Contain a domain\"]   = typeof data === 'object';",
									"",
									"tests[\"Check route properties type\"] = tv4.validate(data, schemaRoute);",
									"console.log(\"Validation failed: \", tv4.error);",
									"",
									"tests[\"Response time is less than 200ms\"] = responseTime < 400;",
									""
								]
							}
						}
					],
					"request": {
						"url": "{{host}}/api/domain/{{domainID}}",
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							},
							{
								"key": "authorization",
								"value": "JWT {{token}}",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"local.dev\"\n}"
						},
						"description": "Change domain parameters, based on route ID"
					},
					"response": []
				}
			]
		},
		{
			"name": "3 Routes",
			"description": "",
			"item": [
				{
					"name": "Create a route",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var data = JSON.parse(responseBody);",
									"var schemaRoute = {",
									" \"_id\": {",
									"    \"type\": \"string\"",
									" },",
									" \"host\": {",
									"    \"type\": \"string\" ",
									" },",
									" \"port\":{",
									"    \"type\": \"numeric\"",
									" },",
									" \"domain\": {",
									"    \"type\": 'string'",
									" },",
									" \"path\": {",
									"    \"type\": 'string'",
									" },",
									" \"active\": {",
									"    \"type\": 'boolean'",
									" },",
									" \"ssl\": {",
									"    \"type\": \"boolean\"",
									" }};",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"No errors\"]          = data.error === undefined;",
									"",
									"tests[\"Response time is less than 200ms\"] = responseTime < 400;",
									"",
									"tests[\"Check route properties type\"] = tv4.validate(data, schemaRoute);",
									"console.log(\"Validation failed: \", tv4.error);",
									"",
									"if (data._id !== undefined) postman.setEnvironmentVariable('routeID', data._id);",
									""
								]
							}
						}
					],
					"request": {
						"url": "{{host}}/api/route",
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							},
							{
								"key": "authorization",
								"value": "JWT {{token}}",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"host\": \"127.0.0.1\",\n\t\"port\": 8090,\n\t\"domain\": \"{{domainID}}\",\n\t\"path\": \"stat\",\n\t\"active\": true,\n\t\"ssl\": false\n}"
						},
						"description": "Create a new route in proxy"
					},
					"response": []
				},
				{
					"name": "Get one route",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var data = JSON.parse(responseBody);",
									"var schemaRoute = {",
									" \"_id\": {",
									"    \"type\": \"string\"",
									" },",
									" \"host\": {",
									"    \"type\": \"string\" ",
									" },",
									" \"port\":{",
									"    \"type\": \"numeric\"",
									" },",
									" \"domain\": {",
									"    \"type\": 'string'",
									" },",
									" \"active\": {",
									"    \"type\": 'boolean'",
									" },",
									" \"ssl\": {",
									"    \"type\": \"boolean\"",
									" }",
									"};",
									"",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"No errors\"]          = data.error === undefined;",
									"tests[\"Contain a route\"]    = typeof data === 'object';",
									"",
									"tests[\"Check route properties type\"] = tv4.validate(data, schemaRoute);",
									"console.log(\"Validation failed: \", tv4.error);",
									"",
									"tests[\"Response time is less than 200ms\"] = responseTime < 400;",
									""
								]
							}
						}
					],
					"request": {
						"url": "{{host}}/api/route/{{routeID}}",
						"method": "GET",
						"header": [
							{
								"key": "authorization",
								"value": "JWT {{token}}",
								"description": ""
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "_id",
									"value": "575c96e27512737c104d3458",
									"type": "text",
									"enabled": false
								}
							]
						},
						"description": "Get just one route of proxy with a specified ID"
					},
					"response": []
				},
				{
					"name": "Get all routes",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"No errors\"]          = data.error === undefined;",
									"tests[\"Return an array\"]    = Array.isArray(data);",
									"tests[\"At least one route\"] = data.length > 0;",
									"",
									"tests[\"Response time is less than 200ms\"] = responseTime < 400;",
									""
								]
							}
						}
					],
					"request": {
						"url": "{{host}}/api/route",
						"method": "GET",
						"header": [
							{
								"key": "authorization",
								"value": "JWT {{token}}",
								"description": ""
							}
						],
						"body": {},
						"description": "List all routes of the proxy"
					},
					"response": []
				},
				{
					"name": "Edit route",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var data = JSON.parse(responseBody);",
									"var schemaRoute = {",
									" \"_id\": {",
									"    \"type\": \"string\"",
									" },",
									" \"host\": {",
									"    \"type\": \"string\" ",
									" },",
									" \"port\":{",
									"    \"type\": \"numeric\"",
									" },",
									" \"domain\": {",
									"    \"type\": 'string'",
									" },",
									" \"active\": {",
									"    \"type\": 'boolean'",
									" },",
									" \"ssl\": {",
									"    \"type\": \"boolean\"     ",
									" }",
									"};",
									"",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"No errors\"]          = data.err === undefined;",
									"tests[\"Contain a route\"]    = typeof data === 'object';",
									"",
									"tests[\"Check route properties type\"] = tv4.validate(data, schemaRoute);",
									"console.log(\"Validation failed: \", tv4.error);",
									"",
									"tests[\"Response time is less than 200ms\"] = responseTime < 400;",
									""
								]
							}
						}
					],
					"request": {
						"url": "{{host}}/api/route/{{routeID}}",
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							},
							{
								"key": "authorization",
								"value": "JWT {{token}}",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"host\": \"127.0.0.1\",\n\t\"port\": 8080,\n\t\"domain\": \"{{domainID}}\",\n\t\"path\": \"status\",\n\t\"active\": true,\n\t\"ssl\": false\n}"
						},
						"description": "Change route parameters, based on route ID"
					},
					"response": []
				}
			]
		},
		{
			"name": "4 Logs",
			"description": "",
			"item": [
				{
					"name": "Get logs stats",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var data = JSON.parse(responseBody);",
									"var schemaRoute = {",
									" \"log_entries\": {",
									"    \"type\": \"number\"",
									" }",
									"};",
									"",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"No errors\"]          = data.error === undefined;",
									"",
									"tests[\"Check route properties type\"] = tv4.validate(data, schemaRoute);",
									"console.log(\"Validation failed: \", tv4.error);",
									"",
									"tests[\"Response time is less than 200ms\"] = responseTime < 200;",
									""
								]
							}
						}
					],
					"request": {
						"url": "{{host}}/api/log",
						"method": "GET",
						"header": [
							{
								"key": "authorization",
								"value": "JWT {{token}}",
								"description": ""
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "_id",
									"value": "575c96e27512737c104d3458",
									"type": "text",
									"enabled": false
								}
							]
						},
						"description": "logs infos:\n - log_entries: number of log documents"
					},
					"response": []
				}
			]
		},
		{
			"name": "5 Users",
			"description": "",
			"item": [
				{
					"name": "List users",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var data = JSON.parse(responseBody);",
									"",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"No errors\"]          = data.error === undefined;",
									"tests[\"Return an array\"]    = Array.isArray(data.users);",
									"tests[\"At least one route\"] = data.users.length > 0;",
									"",
									"tests[\"Response time is less than 200ms\"] = responseTime < 400;"
								]
							}
						}
					],
					"request": {
						"url": "{{host}}/api/user",
						"method": "GET",
						"header": [
							{
								"key": "authorization",
								"value": "JWT {{token}}",
								"description": ""
							}
						],
						"body": {},
						"description": "List all users of the proxy"
					},
					"response": []
				}
			]
		},
		{
			"name": "6 domain tests",
			"description": "",
			"item": []
		},
		{
			"name": "7 clean",
			"description": "",
			"item": [
				{
					"name": "Delete a route",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var data = JSON.parse(responseBody);",
									"var schemaRoute = {",
									" \"_id\": {",
									"    \"type\": \"string\"",
									" },",
									" \"destHost\": {",
									"    \"type\": \"string\" ",
									" },",
									" \"destPort\":{",
									"    \"type\": \"numeric\"",
									" },",
									" \"subDomain\": {",
									"    \"type\": 'string'",
									" },",
									" \"active\": {",
									"    \"type\": 'boolean'",
									" }};",
									"",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"No errors\"]          = data.error === undefined;",
									"tests[\"Contain a route\"]    = typeof data === 'object';",
									"",
									"tests[\"Check route properties type\"] = tv4.validate(data, schemaRoute);",
									"console.log(\"Validation failed: \", tv4.error);",
									"",
									"tests[\"Response time is less than 200ms\"] = responseTime < 400;",
									""
								]
							}
						}
					],
					"request": {
						"url": "{{host}}/api/route/{{routeID}}",
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							},
							{
								"key": "authorization",
								"value": "JWT {{token}}",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"description": "Remove a route from DB and proxy"
					},
					"response": []
				},
				{
					"name": "Delete a domain",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var data = JSON.parse(responseBody);",
									"var schemaRoute = {",
									" \"_id\": {",
									"    \"type\": \"string\"",
									" },",
									" \"domain\": {",
									"    \"type\": \"string\" ",
									" }};",
									"",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"No errors\"]          = data.error === undefined;",
									"tests[\"Contain a route\"]    = typeof data === 'object';",
									"",
									"tests[\"Check route properties type\"] = tv4.validate(data, schemaRoute);",
									"console.log(\"Validation failed: \", tv4.error);",
									"",
									"tests[\"Response time is less than 200ms\"] = responseTime < 400;",
									""
								]
							}
						}
					],
					"request": {
						"url": "{{host}}/api/domain/{{domainID}}",
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							},
							{
								"key": "authorization",
								"value": "JWT {{token}}",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"description": "Remove a domain from DB and proxy"
					},
					"response": []
				}
			]
		}
	]
}